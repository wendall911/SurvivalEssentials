plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

version = fabric_mod_version
archivesBaseName = "${mod_id}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}@zip")
    })

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "com.illusivesoulworks.spectrelib:spectrelib-fabric:${spectrelib_version}+${minecraft_version}"
    include "com.illusivesoulworks.spectrelib:spectrelib-fabric:${spectrelib_version}+${minecraft_version}"

    modApi "dev.architectury:architectury-fabric:${architectury_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}"

    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

    modImplementation "vazkii.patchouli:Patchouli:${patchouli_version}-FABRIC-SNAPSHOT"
    modRuntimeOnly "curse.maven:simpletextoverlay-321283:${simpletextoverlay_fabric_version}"
    modRuntimeOnly "net.jodah:typetools:0.6.3"
    modImplementation "com.electronwill.night-config:core:3.6.7"

    modRuntimeOnly("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive = false
    }
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_version}+${minecraft_version}"

    if (System.getenv('DATA_GEN') != null) {
        // Datagen mods
    }
    else {
        // Runtime testing mods
        //modRuntimeOnly "curse.maven:create_fabric-624165:${create_fabric_version}"
        //modRuntimeOnly "curse.maven:glitchcore-955399:${glitch_core_fabric_version}"
        //modRuntimeOnly "curse.maven:biomesoplenty-220318:${bop_fabric_version}"
        //modRuntimeOnly "curse.maven:terrablender-565956:${terrablender_fabric_version}"
    }
}

loom {
    def aw = project(":Common").file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        commonDatagen {
            client()
            vmArg "-D${mod_id}.common_datagen=1"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../Common/src/generated/resources")}"
        }
        fabricDatagen {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    // Added so we have book data and damage types built in Forge datagen
    from ('../NeoForge/src/generated/resources/') {
        exclude '**/recipes/*'
    }
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('securseApiKey')) {
        apiToken = project.securseApiKey
        def mainFile = upload(project.hscurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion('Java 17')
        mainFile.addModLoader('Fabric')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addRequirement('fabric-api')
        mainFile.addOptional('jei')
        mainFile.addOptional('simpletextoverlay')
        mainFile.addOptional('configured')
        mainFile.addOptional('catalogue')
        mainFile.addOptional('fruit-trees')
        mainFile.addOptional('biomes-o-plenty')
        mainFile.addOptional('botania')
        mainFile.addOptional('exnihilosequentia')
        mainFile.addOptional('oh-the-biomes-youll-go')
        mainFile.addOptional('ecologics')
        mainFile.addOptional('betteranimalsplus')
        mainFile.addOptional('malum')
    }
}

modrinth {
    if (project.hasProperty('seModrinthId')) {
        token = project.modrinthKey
        projectId = project.seModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        loaders = ['fabric']
        dependencies {
            required.project 'fabric-api'
            optional.project 'botania'
            optional.project 'biomesyougo'
            optional.project 'ecologics'
        }
    }
}
