plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'me.modmuss50.mod-publish-plugin' version '0.7.3'
}

repositories {
    maven {
        // location of the maven that hosts Mantle and JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'McJty maven'
        url "https://maven.k-4u.nl"
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Patchouli && Provider
        name = "Blame Jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/wendall911/TinkerSurvival")
        credentials {
            username = project.githubusername
            password = project.githubtoken
        }
    }
}

group = 'com.github.wendall911.survivalistessentials'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def mcversion = "${minecraft_version}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file("run").canonicalPath
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                survivalistessentials {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                survivalistessentials {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', "${modid}",
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources')

            mods {
                survivalistessentials {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_short_version}-${probe_version}") {
        transitive = false
    }

    implementation fg.deobf("curse.maven:cyanide-541676:${cyanide_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    implementation fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")

    compileOnly fg.deobf("curse.maven:carryon-274259:${carryon_version}")

	runtimeOnly fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
	runtimeOnly fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tic_version}")
	runtimeOnly fg.deobf("com.github.wendall911.tinkersurvival:tinkersurvival:${minecraft_version}-${ts_version}") {
        transitive = false
    }

    //runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:3918220")

    //Include some examples here for testing other mods
    //runtimeOnly fg.deobf("curse.maven:terrablender-563928:${terrablender_version}")
    //runtimeOnly fg.deobf("curse.maven:byg-247560:${byg_version}")
    //runtimeOnly fg.deobf("curse.maven:bop-220318:${bop_version}")
    //runtimeOnly fg.deobf("curse.maven:kiwi-303657:3974084")
    //runtimeOnly fg.deobf("curse.maven:fruittrees-355467:3990227")
    //runtimeOnly fg.deobf("curse.maven:biomemakeover-567709:3942516")
    //runtimeOnly fg.deobf("curse.maven:architectury-419699:5137942")
    //runtimeOnly fg.deobf("curse.maven:patchouli-306770:4031402")
    //runtimeOnly fg.deobf("curse.maven:curios-309927:5302436")
    //runtimeOnly fg.deobf("curse.maven:botania-225643:???")
    //runtimeOnly fg.deobf("curse.maven:immersiveengineering-231951:5222176")
    //runtimeOnly fg.deobf("curse.maven:twilightforest-227639:3995805")
    //runtimeOnly fg.deobf("curse.maven:configured-457570:4462837")
    //runtimeOnly fg.deobf("curse.maven:catalogue-459701:4171024")
    //runtimeOnly fg.deobf("curse.maven:autoreglib-250363:4100299")
    //runtimeOnly fg.deobf("curse.maven:quark-243121:4812006")
    //runtimeOnly fg.deobf("curse.maven:ayce-494854:???")
    //runtimeOnly fg.deobf("curse.maven:water_source-388078:???")
    //runtimeOnly fg.deobf("curse.maven:geckolib-388172:4407241")
    //runtimeOnly fg.deobf("curse.maven:arsnouveau-401955:4023830")
    //runtimeOnly fg.deobf("curse.maven:undergarden-379849:???")
    //runtimeOnly fg.deobf("curse.maven:dynamictrees-252818:5600544")
    //runtimeOnly fg.deobf("curse.maven:panda_lib-975460:5485111")
    //runtimeOnly fg.deobf("curse.maven:falling_trees-880630:5489039")
    //runtimeOnly fg.deobf("curse.maven:ecologics-570463:3987881")
    //runtimeOnly fg.deobf("curse.maven:aquaculture-60028:3990680")
    //runtimeOnly fg.deobf("curse.maven:carryon-274259:${carryon_version}")
    //runtimeOnly fg.deobf("curse.maven:lodestone-616457:4616316")
    //runtimeOnly fg.deobf("curse.maven:malum-484064:4952075")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:3783096")
    //runtimeOnly fg.deobf("curse.maven:iceandfire-264231:4614465")
    //runtimeOnly fg.deobf("curse.maven:psi-241665:4952168")
    //runtimeOnly fg.deobf("curse.maven:tinkersreforged-376876:5253528")
    //runtimeOnly fg.deobf("curse.maven:monsterplus-676418:4496903")
    //runtimeOnly fg.deobf("curse.maven:mowziesmobs-250498:5180680")
    //runtimeOnly fg.deobf("curse.maven:xpfromharvest-888441:5038224")
    //runtimeOnly fg.deobf("curse.maven:-:")

    implementation fg.deobf(fileTree(dir: 'libs', include: '*.jar'))
}

def commonManifest = {
    attributes 'FMLAT': 'survivalistessentials_at.cfg'
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${archiveVersion}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', '*.mixins.json']
def replaceProperties = [ 'version': version,
    'issue_tracker': issue_tracker, 'license': license, 'modid': modid, 'display_name': display_name,
    'description': description, 'display_url': display_url, 'update_url': update_url, 'authors': authors,
    'credits': credits, 'logo_file': logo_file, 'minecraft_version_range': minecraft_version_range,
    'forge_version_range': forge_version_range, "loader_version_range": loader_version_range
]

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    inputs.properties replaceProperties
    exclude '.cache'
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'mod_version': mod_version
    }

    it.into 'files/'
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/' + project.getName() + '-' + version + '-changelog.txt'
def publishFile = project(":").projectDir.toString() + "/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    if (file(changelogFile).exists()) {
        changelog = file(changelogFile).text
    }
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.addAll(['forge'])

    if (project.hasProperty('securseApiKey')) {
        curseforge {
            accessToken = project.securseApiKey
            projectId = project.securseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('configured')
            optional('catalogue')
            optional('fruit-trees')
            optional('quark')
            optional('biomes-o-plenty')
            optional('all-you-can-eat')
            optional('water-source')
            optional('sushigocrafting')
            optional('botania')
            optional('ars-nouveau')
            optional('exnihilosequentia')
            optional('the-undergarden')
            optional('dynamictrees')
            optional('oh-the-biomes-youll-go')
            optional('the-twilight-forest')
            optional('ecologics')
            optional('alexs-mobs')
            optional('betteranimalsplus')
            optional('malum')
            optional('ice-and-fire-dragons')
            optional('psi')
        }
    }
    if (project.hasProperty('seModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.seModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('quark')
            optional('allyoucaneat')
            optional('botania')
            optional('exnihilosequentia')
            optional('dynamictrees')
            optional('biomesyougo')
            optional('ecologics')
            optional('psi')
        }
    }
    if (project.hasProperty('seGithubToken')) {
    }
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(changelogFile);
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

tasks.build.dependsOn('changelog', 'generateUpdates')

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri(maven_url)
            credentials {
                username = project.githubusername
                password = project.githubtoken
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            artifactId = modid
            from(components.java)
        }
    }
}
