buildscript {
    repositories {
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'parchment'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content {
                includeGroup "org.spongepowered"
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.8'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'io.freefair.gradle:lombok-plugin:6.3.0'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'io.freefair.lombok'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

repositories {
    maven {
        // location of the maven that hosts Mantle and JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'McJty maven'
        url "https://maven.k-4u.nl"
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

group = 'com.github.wendall911.survivalessentials'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def mcversion = "${minecraft_version}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: mappings_version

    runs {
        client {
            workingDirectory project.file("run").canonicalPath
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                survivalessentials {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                survivalessentials {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'survivalessentials',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources')

            mods {
                survivalessentials {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:jei_integration-265917:3812175")

    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_short_version}-${probe_version}") {
        transitive = false
    }

    compileOnly fg.deobf("curse.maven:carryon-274259:3674344")

    //runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:3918220")

    //Include some examples here for testing other mods
    //runtimeOnly fg.deobf("curse.maven:terrablender-563928:${terrablender_version}")
    //runtimeOnly fg.deobf("curse.maven:byg-247560:${byg_version}")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:3783096")
    //runtimeOnly fg.deobf("curse.maven:alexs_mobs-426558:3853078")
    //runtimeOnly fg.deobf("curse.maven:architectury-419699:3983970")
    //runtimeOnly fg.deobf("curse.maven:betteranimalsplus-303557:3680864")
    //runtimeOnly fg.deobf("curse.maven:sushigocrafting-452500:3758195")
    //runtimeOnly fg.deobf("curse.maven:titanium-287342:3707558")
    //runtimeOnly fg.deobf("curse.maven:patchouli-306770:3846086")
    //runtimeOnly fg.deobf("curse.maven:curios-309927:3841948")
    //runtimeOnly fg.deobf("curse.maven:botania-225643:3755269")
    //runtimeOnly fg.deobf("curse.maven:immersiveengineering-231951:3755665")
    //runtimeOnly fg.deobf("curse.maven:buildinggadgets-298187:3725903")
    //runtimeOnly fg.deobf("curse.maven:homeostatic-634466:3845248")
    //runtimeOnly fg.deobf("curse.maven:twilightforest-227639:3901400")
    //runtimeOnly fg.deobf("curse.maven:oreganized-439153:3819472")
    //runtimeOnly fg.deobf("curse.maven:macawswindows-363569:3712019")
    //runtimeOnly fg.deobf("curse.maven:configured-457570:3721946")
    //runtimeOnly fg.deobf("curse.maven:catalogue-459701:3803098")
    //runtimeOnly fg.deobf("curse.maven:electrodynamics-316867:3784685")
    //runtimeOnly fg.deobf("curse.maven:valhesia_core-416935:3768769")
    //runtimeOnly fg.deobf("curse.maven:valhesia_structures-347488:3708292")
    //runtimeOnly fg.deobf("curse.maven:geckolib-388172:3945270")
    //runtimeOnly fg.deobf("curse.maven:ars_nouveau-401955:3944414")
    //runtimeOnly fg.deobf("curse.maven:exnihilo-400012:3874541")
    //runtimeOnly fg.deobf("curse.maven:undergarden-379849:3810810")
    //runtimeOnly fg.deobf("curse.maven:dynamictrees-252818:3831578")
    //runtimeOnly fg.deobf("curse.maven:ecologics-570463:3939725")

    implementation fg.deobf(fileTree(dir: 'libs', include: '*.jar'))
}

def commonManifest = {
    attributes 'FMLAT': 'survivalessentials_at.cfg'
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${archiveVersion}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version,
            'minecraft_version_range': minecraft_version_range,
            'forge_version_range': forge_version_range,
            "loader_version_range": loader_version_range
    }
    it.into "$buildDir/resources/main/"
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'mod_version': mod_version
    }

    it.into 'files/'
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure {
        finalizedBy(replaceResources)
        finalizedBy(updates)
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    if (project.hasProperty('tscurseApiKey')) {
        apiKey = project.tscurseApiKey
        project {
            id = project.tscurseId
            changelog = file('build/libs/' + project.getName() + '-' + project.version + '-changelog.txt')
            releaseType = cf_release_type
            addGameVersion(minecraft_version)
            mainArtifact(jar) {
                relations {
                    optionalLibrary 'configured'
                    optionalLibrary 'catalogue'
                    optionalLibrary 'fruit-trees'
                    optionalLibrary 'quark'
                    optionalLibrary 'biomes-o-plenty'
                    optionalLibrary 'all-you-can-eat'
                    optionalLibrary 'water-source'
                    optionalLibrary 'sushigocrafting'
                    optionalLibrary 'botania'
                    optionalLibrary 'ars-nouveau'
                    optionalLibrary 'ex-nihilo-sequentia'
                    optionalLibrary 'the-undergarden'
                    optionalLibrary 'dynamictrees'
                    optionalLibrary 'oh-the-biomes-youll-go'
                    optionalLibrary 'the-twilight-forest'
                    optionalLibrary 'ecologics'
                    optionalLibrary 'alexs-mobs'
                    optionalLibrary 'betteranimalsplus'
                }
            }
        }
    }
}

tasks.curseforge.dependsOn build

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File('build/libs/' + project.getName() + '-' + version + '-changelog.txt');
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${last_mod_version}";
}

tasks.build.dependsOn('changelog')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE'
    }

    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    manifest commonManifest
    classifier = 'deobf'
}

tasks.build.dependsOn('sourcesJar', 'deobfJar')

artifacts {
    archives deobfJar
    archives sourcesJar
    archives jar
}

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

