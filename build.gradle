plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '0.1.110'
    id 'io.github.goooler.shadow' version '8.1.7'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'me.modmuss50.mod-publish-plugin' version '0.7.3'
}

repositories {
    maven {
        // location of the maven that hosts Mantle and JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'McJty maven'
        url "https://maven.k-4u.nl"
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Patchouli && Provider
        name = "Blame Jared"
        url = "https://maven.blamejared.com"
    }
	maven {
		name = "C4's Maven"
		url = "https://maven.theillusivec4.top/"
	}
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup('software.bernie.geckolib')
            includeGroup('com.eliotlash.mclib')
        }
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/wendall911/TinkerSurvival")
        credentials {
            username = project.githubusername
            password = project.githubtoken
        }
    }
}

group = 'com.github.wendall911.survivalistessentials'
version = "${minecraft_version}-${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

base {
    archivesName = "${mod_name}"
}

neoForge {
    version = neoforge_version
    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        server {
            server()
        }
        data {
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
            data()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    compileOnly "mezz.jei:jei-1.21.1-common-api:${jei_version}"
    implementation "mezz.jei:jei-1.21.1-neoforge:${jei_version}"

    runtimeOnly ("mcjty.theoneprobe:theoneprobe:1.21_neo-${probe_version}") {
        transitive = false
    }

    implementation "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE-SNAPSHOT"
    //implementation "xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}"

    //runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"
    //compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"

    compileOnly "curse.maven:carryon-274259:${carryon_version}"

    //runtimeOnly "curse.maven:configured-457570:4462839"
    //runtimeOnly "slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}"
    //runtimeOnly "slimeknights.tconstruct:TConstruct:${minecraft_version}-${tic_version}"
    //runtimeOnly "com.github.wendall911.tinkersurvival:tinkersurvival:${minecraft_version}-${ts_version}" {
    //    transitive = false
    //}

    //runtimeOnly "curse.maven:crafttweaker-239197:3918220"

    //Include some examples here for testing other mods
    //runtimeOnly "curse.maven:terrablender-940057:${terrablender_version}"
    //runtimeOnly "curse.maven:byg-1070751:${byg_version}"
    //runtimeOnly "curse.maven:tyg-962544:${tyg_version}"
    //runtimeOnly "curse.maven:corgilib-693313:${corgilib_version}"
    //runtimeOnly "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
    //runtimeOnly "curse.maven:bop-220318:${bop_version}"
    //runtimeOnly "curse.maven:glitch_core-955399:${glitch_core_version}"
    //runtimeOnly "curse.maven:kiwi-303657:3974084"
    //runtimeOnly "curse.maven:fruittrees-355467:3990227"
    //runtimeOnly "curse.maven:biomemakeover-567709:4642570"
    //runtimeOnly "curse.maven:architectury-419699:4633048"
    //runtimeOnly "curse.maven:botania-225643:???"
    //runtimeOnly "curse.maven:immersiveengineering-231951:${ie_version}"
    //runtimeOnly "curse.maven:twilightforest-227639:3995805"
    //runtimeOnly "curse.maven:catalogue-459701:3873264"
    //runtimeOnly "curse.maven:autoreglib-250363:3857246"
    //runtimeOnly "curse.maven:quark-243121:3961436"
    //runtimeOnly "curse.maven:ayce-494854:???"
    //runtimeOnly "curse.maven:water_source-388078:???"
    //runtimeOnly "curse.maven:geckolib-388172:4019767"
    //runtimeOnly "curse.maven:arsnouveau-401955:4631683"
    //runtimeOnly "curse.maven:undergarden-379849:???"
    //runtimeOnly "curse.maven:dynamictrees-252818:4979755"
    //runtimeOnly "curse.maven:ecologics-570463:3987881"
    //runtimeOnly "curse.maven:aquaculture-60028:3990680"
    //runtimeOnly "curse.maven:carryon-274259:${carryon_version}"
    //runtimeOnly "curse.maven:lodestone-616457:4636991"
    //runtimeOnly "curse.maven:malum-484064:4638343"
    //runtimeOnly "curse.maven:citadel-331936:3783096"
    //runtimeOnly "curse.maven:iceandfire-264231:4614465"
    //runtimeOnly "curse.maven:railcraft_reborn-901491:5650759"

    implementation fileTree(dir: 'libs', include: '*.jar')
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${archiveVersion}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}



processResources {
    def resourceTargets = ['META-INF/neoforge.mods.toml', 'pack.mcmeta', '*.mixins.json']
    def expandProps = [
        'version': version,
        'issue_tracker': issue_tracker,
        'license': license,
        'mod_id': mod_id,
        'display_name': display_name,
        'description': description,
        'display_url': display_url,
        'update_url': update_url,
        'authors': authors,
        'credits': credits,
        'logo_file': logo_file,
        'neoforge_mc_version_range': neoforge_mc_version_range,
        'neoforge_loader_version_range': neoforge_loader_version_range
    ]
    exclude '.cache'

    filesMatching(resourceTargets) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into 'files/'
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/' + project.getName() + '-' + version + '-changelog.txt'
def publishFile = project(":").projectDir.toString() + "/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    if (file(changelogFile).exists()) {
        changelog = file(changelogFile).text
    }
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.addAll(['neoforge'])

    if (project.hasProperty('securseApiKey')) {
        curseforge {
            accessToken = project.securseApiKey
            projectId = project.securseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('configured')
            optional('catalogue')
            optional('fruit-trees')
            optional('quark')
            optional('biomes-o-plenty')
            optional('all-you-can-eat')
            optional('water-source')
            optional('sushigocrafting')
            optional('botania')
            optional('ars-nouveau')
            optional('exnihilosequentia')
            optional('the-undergarden')
            optional('dynamictrees')
            optional('oh-the-biomes-weve-gone')
            optional('the-twilight-forest')
            optional('ecologics')
            optional('alexs-mobs')
            optional('betteranimalsplus')
            optional('malum')
            optional('ice-and-fire-dragons')
            optional('psi')
        }
    }
    if (project.hasProperty('seModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.seModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('quark')
            optional('allyoucaneat')
            optional('botania')
            optional('exnihilosequentia')
            optional('dynamictrees')
            optional('oh-the-biomes-weve-gone')
            optional('ecologics')
            optional('psi')
        }
    }
    if (project.hasProperty('seGithubToken')) {
    }
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(changelogFile);
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

tasks.generateUpdates.mustRunAfter('jar')

tasks.build.dependsOn('changelog', 'generateUpdates')

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri(maven_url)
            credentials {
                username = project.githubusername
                password = project.githubtoken
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            artifactId = mod_id
            from(components.java)
        }
    }
}
